" Toggle between text width of 80 and no text width
function! TextWidthToggle()
  if &textwidth
    setlocal textwidth=0
  else
    setlocal textwidth=80
  endif
  " Echo current setting
  set textwidth
endfunction
nnoremap <Leader>sw :call TextWidthToggle()<CR>

" Use relative line numbers with absolute number on current line
set relativenumber
set number
" Toggle between above setting and no numbering at all
function! LineNumberToggle()
  if &number
    setlocal nonumber
    setlocal norelativenumber
  else
    setlocal number
    setlocal relativenumber
  endif
endfunction
nnoremap <Leader>sn :call LineNumberToggle()<CR>

" [R]eveal current file in NERDTree
nnoremap <Leader>r :NERDTreeFind<CR>
" [F]ind a file in CtrlP
nnoremap <Leader>f :CtrlP<CR>
" [W]rite
nnoremap <Leader>w :w<CR>
" Toggle paste mode
nnoremap <Leader>p :set paste!<CR>

" Turn off markdown spellcheck
autocmd FileType markdown setlocal nospell
" Turn off syntax highlighting for markdown files
" It doesn't detect kramdown code blocks (made with ~~~) or other rarer features
autocmd FileType markdown setlocal syntax=OFF

" Add RuboCop to syntastic checkers
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" Show files that begin with . in NERDTree
let NERDTreeShowHidden=1

" Easier to escape
imap jk <Esc>

" Enable scrolling with mouse
set mouse=a
set ttymouse=xterm2

" Copy to system clipboard
set clipboard=unnamed

" Backup files
set backup
set writebackup
if isdirectory($HOME . '/.vim/backup') == 0
  :silent !mkdir -p ~/.vim/backup
endif
set backupdir=~/.vim/backup//

" Keep swp files out of projects
set swapfile
if isdirectory($HOME . '/.vim/swp') == 0
  :silent !mkdir -p ~/.vim/swp
endif
set directory=~/.vim/swp//

" Keep undo files
set undofile
if isdirectory($HOME . '/.vim/undo') == 0
  :silent !mkdir -p ~/.vim/undo
endif
set undodir=~/.vim/undo//

" Make search case insensitive
set ignorecase
" unless the search term contains caps
set smartcase


colorscheme grb256
